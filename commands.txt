__1
BR-SRV:
dnf install samba* krb5*
mv /etc/samba/smb.conf /etc/samba/smb.conf.bak
mv /etc/krb5.conf /etc/krb5.conf.bak
nano /etc/krb5.conf.d/crypto-policies
default_tgs
default_tkt
samba-tool domain provision --use-rfc2307 --interactive
DNS backend NONE
cp /var/lib/samba/private/krb5.conf /etc/krb5.conf
nano /etc/krb5.conf
realms kdc = br-srv-au-team.irpo
systemctl enable --now samba
reboot force
kinit administrator@AU-TEAM.IRPO
HQ-CLI:
echo “172.30.100.1 au-team.irpo” >> /etc/hosts
realm join -U -v Administrator@AU-TEAM.IRPO
BR-SRV:
samba-tool group add hq
for i in {1..5}; do samba-tool user add user$i.hq P@ssw0rd; samba-tool group addmembers hq user$i.hq; done
samba-tool group listmembers hq
HQ-CLI:
nano /etc/sssd/sssd.conf
systemctl restart sssd
nano /etc/krb5.conf
«Настройки» - «Сетевые учетные записи». Выбираем Kerberos, вводим administrator@AU-TEAM.IRPO и P@ssw0rd
sss_cache -E
reboot force
id user1.hq@AU-TEAM.IRPO
su - user1.hq@AU-TEAM.IRPO
visudo
%hq@au-team.irpo ALL=(ALL) /bin/cat, /bin/grep, /bin/id
__2
HQ-SRV
lsblk
fdisk /dev/sdb (sdc/sdd)
g
n
Жмем Enter 3 раза
W
mdadm --create --verbose /dev/md0 -l 5 -n 3 /dev/sd[b-d]1
mdadm --detail --scan --verbose >> /etc/mdadm.conf
mkfs.ext4 /dev/md0
mkdir /raid5
nano /etc/fstab
/dev/md0 /raid5 /ext4 defaults 0 0
systemctl daemon-reload
mount -a
df -h
dnf install nfs4-acl-tools
mkdir /raid5/nfs
chown nobody:nobody /raid5/nfs
chmod 777 /raid5/nfs
nano /etc/exports
/raid5/nfs 192.168.200.0/28 (rw)
exportfs -a
systemctl enable --now nfs-server
HQ-CLI:
mkdir /mnt/nfs
nano /etc/fstab
192.168.100.1:/raid5/nfs /mnt/nfs nfs auto 0 0
mount -a
__3
HQ-RTR
nano /etc/chrony.conf
server 127.0.0.1 iburst prefer
local stratum 5
allow 0/0
hwtimestamp *
systemctl restart chronyd
chronyc sources
HQ-SRV, HQ-CLI, BR-RTR, BR-SRV:
nano /etc/chrony.conf
server 172.16.4.1 iburst prefer
systemctl restart chronyd
chronyc sources
__4
BR-SRV
nano /etc/ansible/demo.yml
VMS:
hosts:
HQ-SRV:
ansible_host: 192.168.100.1
ansible_user: sshuser
ansible_port: 2024
HQ-CLI :
ansible_host: 192.158.200.2
ansible_user: username
ansible_port: 22
HQ-RTR :
ansible_host: 172.16.4.1
ansible_user: net_admin
ansible_port: 22
BR-RTR :
ansible_host: 172.16.5.1
ansible_user: net_admin
ansible_port: 22
ssh-keygen -t rsa
Далее копируем ключи. На вопрос с сохранием отпечатка пишем yes, пароль от sshuser - P@ssw0rd, от username - P@ssw0rd, от net_admin - P@$$w0rd
ssh-copy-id -p 2024 sshuser@192.168.100.1
ssh-copy-id username@192.168.200.2
ssh-copy-id net_admin@172.16.4.1
ssh-copy-id net_admin@172.16.5.1
nano /etc/ansible/ansible.cfg
[defaults]
inventory = ./demo.yml
ask_pass = False
host_key_cheking = False
interpreter_python=/usr/bin/python
ansible -m ping all
__5
dnf install docker-ce docker-compose -y
cd /home/username
systemctl enable docker --now
mediawiki docker-compose
Adding a Database Server
nano wiki.yml
И копируем в него содержимое этого раздела. Вносим изменения в порт, образ контейнера с БД, пароль пользователя к БД и пусть хранения volume. Приводим файл к следующему виду:
Обязательно в начале перед services убрать пробел. Строчка с комментарием должна быть в таком виде, она нужна будет позже.
docker volume create dbvolume
docker-compose -f wiki.yml up -d
Проверяем:
docker ps -a
172.30.100.1:8080. Далее нажимаем “set up the wiki”. Жмем далее до момента ввода данных о БД. Заполняет данные о mariadb:
Затем переходим к установке mediawiki:
После завершения установка mediawiki должен быть скачан файл с настройками - LocalSettings.php. Его необходимо передать на BR-SRV.
scp -P 2024 /home/username/Загрузки/LocalSettings.php sshuser@172.30.100.1:/tmp
После этого переходим на BR-SRV:
mv /tmp/LocalSettings.php /home/username
nano wiki.yaml
Убираем комментарий со строчки.
Перезапускаем докер
docker-compose -f wiki.yml stop
docker-compose -f wiki.yml up -d
172.30.100.1:8080 и проверяем настроенное приложение. Входим в созданную учетную запись.
__6
На BR-RTR пробрасываем его 80 в 8080 BR-SRV и пробрасываем его 2024 в 2024 BR-SRV:
iptables -t nat -A PREROUTING -p tcp -m tcp -d 172.16.5.1/24 --dport 80 -j DNAT --to-destination 172.30.100.1:8080
iptables -t nat -A PREROUTING -p tcp -m tcp -d 172.16.5.1/24 --dport 2024 -j DNAT --to-destination 172.30.100.1:2024
iptables-save > /etc/sysconfig/iptables
После этого с клиента переходим по адресу 172.16.5.1, нас должно перевести на страницу с MediaWiki.
Проверяем порт 2024 по SSH:
ssh –p 2024 sshuser@172.16.5.1
Подключить нас должно к BR-SRV
На HQ-RTR пробрасываем его 2024 в 2024 HQ-SRV:
iptables -t nat -A PREROUTING -p tcp -m tcp -d 172.16.4.1/28 --dport 2024 -j DNAT --to-destination 192.168.100.1:2024
iptables-save > /etc/sysconfig/iptables
Проверяем порт 2024 по SSH:
ssh –p 2024 sshuser@172.16.4.1
Подключить нас должно к HQ-SRV
__7
HQ-SRV:
dnf install httpd mariadb mariadb-server php php-mysqlnd php-pdo php-gd php-mbstring php-zip php-intl php-soap
nano /etc/php.ini
На следующей строчке после [PHP] пишем
max_input_vars=6000
systemctl enable --now httpd php-fpm mariadb
systemctl restart httpd php-fpm mariadb
mysql_secure_installation
Пишем пароль для рута - P@ssw0rd. На все остальные вопросы отвечаем Yes.
mysql -u root -p
CREATE DATABASE moodledb DEFAULT CHARACTER SET utf8;
CREATE USER moodle@localhost IDENTIFIED BY ‘P@ssw0rd’;
GRANT ALL ON moodledb.* TO 'moodle'@'localhost';
flush privileges;
quit;
systemctl restart mariadb
Далее переходим на сайт moodle.org, в раздел Downloads и скачиваем
wget https://packaging.moodle.org/stable405/moodle-latest-405.tgz
tar -xzf moodle-latest-4.0.5.tgz
mv moodle/* /var/www/html
chown -R apache:apache /var/www/html
20
chmod -R 0777 /var/www/html
mkdir /var/moodledata
chown -R apache:apache /var/moodledata
chmod -R 0777 /var/moodledata
systemctl restart httpd
После этого переходим на клиента и вводим в адресной 192.168.100.1 и продолжаем установку.
Каталог данный указываем /var/moodledata
Принимаем лицензионное соглашение, смотрим что минимальные требования к установке выполнены и устанавливаем.
После установки нажимаем продолжить внизу страницы. далее заполняем основные параметры учетной записи.
После этого заполняем параметры главное страницы. Указываем номер нашего рабочего места (на скрине указал IP адрес стенда, на котором это выполнялось)
После этого сохраняем изменения. Указываем адрес поддержки - demo@demo.demo. Установка завершена
__8
dnf install nginx
systemctl enable --now nginx
nano /etc/nginx/nginx.conf
В файле комментируем созданный по умолчанию сервер и добавляем в него 2 других, как показано на рисунуке:
server {
		listen 80;
		server_name moodle.au—tean.irpo;
		location / {
				 proxy_pass http://132.168.100.1:80;
				 }
}
server {
		listen 80;
		server_name wiki-au-team.irpo;
		location / {
				 proxy_pass http://172.30.100.1:8080;
				 }
}
systemctl restart nginx

krb5.conf.txt
# To opt out of the system crypto-policies configuration of krb5, remove the
# symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated.
includedir /etc/krb5. conf.d/
[logging]
default =
FILE: /var/tog/krb51ibs . log
kdc = FILE: /var/log/krb5kdc. tog
admin server = FILE: /var/log/kadmind. log
[libdefaults]
dns_lookup_realm = false
ticket_lifetime = 24h
renew lifetime = 7d
forwardable = true
rdns = false
pkinit_anchors = FILE: /etc/pki/tls/certs/ca-bundle.crt
spake_preauth_groups = edwards25519
dns_canonicalize_hostname = fallback
qualify_shortname = ""
default ccache name = KEYRING:persistent:%{uid}
udp_preference_timit = 0
default realm = AU-TEAM.IRPO
[realms]
AU-TEAM. IRPO = {
kdc = br-srv.au-team.irpo
admin server = br-srv.au-team.irpo
}
[domain_realm]
. au-team.irpo = AU-TEAM.IRPO
au-team.irpo = AU-TEAM.IRPO
